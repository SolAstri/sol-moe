---
// components/Rating.astro
interface Props {
    value: number;
    max?: number;
    showValue?: boolean;
    size?: 'sm' | 'md' | 'lg';
}

const {
    value,
    max = 10,
    showValue = true,
    size = 'md'
} = Astro.props;

const percentage = (value / max) * 100;
const stars = 5; // We'll show 5 stars regardless of max value

const sizes = {
    sm: 'w-4 h-4',
    md: 'w-5 h-5',
    lg: 'w-6 h-6'
};
---

<div class="flex items-center gap-2">
    <div class="relative">
        <div class="flex gap-0.5">
            {Array.from({ length: stars }).map(() => (
                    <svg
                            class={`${sizes[size]} text-accent/20`}
                            viewBox="0 0 24 24"
                            fill="currentColor"
                    >
                        <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                    </svg>
            ))}
        </div>
        <div
                class="absolute top-0 left-0 flex gap-0.5 overflow-hidden"
                style={`width: ${percentage}%`}
        >
            {Array.from({ length: stars }).map(() => (
                    <svg
                            class={`${sizes[size]} text-accent`}
                            viewBox="0 0 24 24"
                            fill="currentColor"
                    >
                        <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                    </svg>
            ))}
        </div>
    </div>
    {showValue && (
            <span class="text-sm font-mono">
      <span class="text-accent">{value}</span>
      <span class="text-main/40">/</span>
      <span class="text-main/60">{max}</span>
    </span>
    )}
</div>