---
// pages/library/index.astro
import Layout from '../../layouts/Layout.astro';
import AnimeCard from '../../components/AnimeCard.astro';
import LibraryFilter from '../../components/LibraryFilter.astro';
import { animeData } from '../../data/anime';
import { calculateStats, getTagCounts } from '../../utils/stats';

// Get URL params
const currentStatus = Astro.url.searchParams.get('status') || undefined;
const currentSort = Astro.url.searchParams.get('sort') || 'recent';
const currentTag = Astro.url.searchParams.get('tag') || undefined;

// Calculate stats and get popular tags
const stats = calculateStats(animeData);
const tagCounts = getTagCounts(animeData);
const popularTags = Object.entries(tagCounts)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 12)
  .map(([tag]) => tag);

// Filter and sort anime
let filteredAnime = [...animeData];

if (currentStatus) {
  filteredAnime = filteredAnime.filter(anime => anime.status === currentStatus);
}

if (currentTag) {
  filteredAnime = filteredAnime.filter(anime => anime.tags?.includes(currentTag));
}

// Sort anime
switch (currentSort) {
  case 'rating':
    filteredAnime.sort((a, b) => (b.rating || 0) - (a.rating || 0));
    break;
  case 'progress':
    filteredAnime.sort((a, b) => {
      const aProgress = (a.progress / a.totalEpisodes) * 100;
      const bProgress = (b.progress / b.totalEpisodes) * 100;
      return bProgress - aProgress;
    });
    break;
  case 'title':
    filteredAnime.sort((a, b) => a.title.english.localeCompare(b.title.english));
    break;
  default: // 'recent'
    filteredAnime.sort((a, b) => {
      if (a.status === 'watching' && b.status !== 'watching') return -1;
      if (a.status !== 'watching' && b.status === 'watching') return 1;
      return (b.rating || 0) - (a.rating || 0);
    });
}

// Calculate current view stats
const viewStats = {
  total: filteredAnime.length,
  avgRating: filteredAnime.reduce((acc, curr) => acc + (curr.rating || 0), 0) /
    filteredAnime.filter(a => a.rating).length || 0,
  totalEpisodes: filteredAnime.reduce((acc, curr) => acc + curr.progress, 0)
};
---

<Layout title="Library">
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <header class="mb-8">
      <h1 class="text-3xl font-medium mb-2">Anime Library</h1>
      <div class="flex items-center gap-4 text-sm font-mono text-main/60">
        <span>{viewStats.total} entries</span>
        {viewStats.avgRating > 0 && (
          <>
            <span>•</span>
            <span>{viewStats.avgRating.toFixed(1)} average rating</span>
          </>
        )}
        <span>•</span>
        <span>{viewStats.totalEpisodes} episodes watched</span>
      </div>
    </header>

    <div class="mb-8">
      <LibraryFilter
        currentStatus={currentStatus}
        currentSort={currentSort}
        currentTag={currentTag}
        tags={popularTags}
        stats={stats}
      />
    </div>

    <div class="grid gap-4">
      {filteredAnime.map(anime => (
        <AnimeCard
          anime={anime}
          detailed={true}
        />
      ))}
    </div>

    {filteredAnime.length === 0 && (
      <div class="text-center py-12 text-main/60">
        <p class="font-medium">No anime found</p>
        <p class="text-sm mt-1">Try adjusting your filters</p>
      </div>
    )}
  </div>
</Layout>
